import { Injectable, Inject, NotFoundException, ForbiddenException, Logger, BadRequestException, Get, Query} from '@nestjs/common';
import { Pool } from 'pg';
import { CreateListingDto } from './dto/create-listing.dto';
import { UpdateListingDto } from './dto/update-listing.dto';
import { CategoryService } from '../listing/category/category.service';


@Injectable()
export class ListingService {
    private readonly logger = new Logger(ListingService.name);

    constructor(
        @Inject('PG_POOL') private readonly db: Pool,
        private readonly categoryService: CategoryService,
    ) {
        this.logger.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è —á–µ—Ä–Ω–æ–≤–∏–∫–∏)
    async getListingsByUser(userId: number) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
        const query = 'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "startDate", "endDate", photos FROM listings WHERE "userId" = $1';
        console.log('SQL-–∑–∞–ø—Ä–æ—Å:', query, [userId]); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const result = await this.db.query(query, [userId]);
        this.logger.log(`–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.rows.length}`);
        return result.rows;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å "draft" –∏ "bookingStatus" –∫–∞–∫ "available")
    async createListing(dto: CreateListingDto, userId: number) {
        const { title, description, price, categoryId, location, startDate, endDate, photos, priceType } = dto;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "draft" –∏ "bookingStatus" –∫–∞–∫ "available" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const status = 'draft';
        const bookingStatus = 'available';

        const result = await this.db.query(
            `INSERT INTO listings
             (title, description, price, "categoryId", "userId", status, "bookingStatus", location, "startDate", "endDate", photos, "priceType")
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
                 RETURNING *`,
            [
                title,
                description,
                price,
                categoryId,
                userId,
                status,
                bookingStatus,
                location,
                startDate,
                endDate,
                photos,
                priceType, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ü–µ–Ω—ã
            ]
        );

        return result.rows[0];
    }


    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID (—á–µ—Ä–Ω–æ–≤–∏–∫–∏ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é)
    async getListingById(id: number, userId: number | null) {
        console.log(`üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: ${id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const exists = await this.db.query('SELECT id FROM listings WHERE id = $1', [id]);
        if (!exists.rows.length) {
            console.error(`‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const result = await this.db.query(
            'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "startDate", "endDate", photos FROM listings WHERE id = $1',
            [id]
        );

        if (!result.rows.length) {
            console.error(`‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
            throw new NotFoundException('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        }

        const listing = result.rows[0];

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bookingStatus –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!listing.bookingStatus) {
            listing.bookingStatus = "available"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ bookingStatus
        if (listing.userId !== userId) {
            delete listing.status;
            delete listing.bookingStatus;
        }

        console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–∞–π–¥–µ–Ω–æ`);
        return listing;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async updateListing(id: number, dto: UpdateListingDto, userId: number) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const existing = await this.db.query('SELECT "userId", status, "bookingStatus" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ "–∞—Ä—Ö–∏–≤"
        if (existing.rows[0].status === 'archived') {
            throw new ForbiddenException('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ categoryId —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        if (dto.categoryId && isNaN(dto.categoryId)) {
            throw new BadRequestException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        }

        // –ï—Å–ª–∏ categoryId –ø–µ—Ä–µ–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (dto.categoryId) {
            const category = await this.categoryService.getCategoryById(dto.categoryId);
            if (!category) {
                throw new NotFoundException('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updateData: Record<string, any> = {}; // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è updateData
        const validFields = ['title', 'description', 'price', 'location', 'startDate', 'endDate', 'categoryId', 'status', 'bookingStatus', 'photos'];

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ updateData —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ dto –∏ –Ω–µ —Ä–∞–≤–Ω—ã undefined
        for (const field of validFields) {
            if (dto[field] !== undefined && dto[field] !== null && dto[field] !== '') {
                updateData[field] = dto[field];
            }
        }

        // –ï—Å–ª–∏ updateData –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        if (Object.keys(updateData).length === 0) {
            throw new BadRequestException('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }

        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if (dto.status === undefined) {
            updateData.status = existing.rows[0].status;
        }

        // –ï—Å–ª–∏ bookingStatus –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π bookingStatus
        if (dto.bookingStatus === undefined) {
            updateData.bookingStatus = existing.rows[0].bookingStatus;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å
        const setClause = Object.keys(updateData)
            .map((key, index) => `"${key}" = $${index + 1}`)
            .join(', ');

        const values = Object.values(updateData);
        values.push(id); // –î–æ–±–∞–≤–ª—è–µ–º id –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π

        const query = `UPDATE listings SET ${setClause} WHERE id = $${values.length} RETURNING *`;
        const result = await this.db.query(query, values);

        return result.rows[0];
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async deleteListing(id: number, userId: number) {
        const existing = await this.db.query('SELECT "userId" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        const result = await this.db.query('DELETE FROM listings WHERE id = $1 RETURNING *', [id]);
        return result.rows[0];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ)
    async getListingsByCategory(categoryId: number, status: string = 'published') {
        const result = await this.db.query(
            'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "startDate", "endDate", photos FROM listings WHERE "categoryId" = $1 AND status = $2',
            [categoryId, status]
        );
        return result.rows;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    async getPublishedListings() {
        const result = await this.db.query(
            'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "start_date", "end_date", photos FROM listings WHERE status = $1',
            ['published']
        );
        return result.rows;
    }

    // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async archiveListing(id: number, userId: number) {
        const existing = await this.db.query('SELECT "userId" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        const result = await this.db.query(
            'UPDATE listings SET status = $1 WHERE id = $2 RETURNING *',
            ['archived', id]
        );
        return result.rows[0];
    }

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async publishListing(id: number, userId: number) {
        const existing = await this.db.query('SELECT "userId", status FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        const result = await this.db.query(
            'UPDATE listings SET status = $1 WHERE id = $2 RETURNING *',
            ['published', id]
        );
        return result.rows[0];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    async getListingsByLocation(locationId: number) {
        const result = await this.db.query(
            'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "start_date", "end_date", photos FROM listings WHERE "locationId" = $1',
            [locationId]
        );
        return result.rows;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    async updateBookingStatus(id: number, bookingStatus: string, userId: number) {
        const existing = await this.db.query('SELECT "userId" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        }

        const result = await this.db.query(
            'UPDATE listings SET "bookingStatus" = $1 WHERE id = $2 RETURNING *',
            [bookingStatus, id]
        );
        return result.rows[0];
    }

    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    async bookListing(id: number, userId: number, bookedDates: string[]) {
        const existing = await this.db.query('SELECT "userId", "start_date", "end_date", "bookingStatus" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        const listing = existing.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç —Å–≤–æ—ë –∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if (listing.userId === userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
        if (listing.status !== 'published') {
            throw new ForbiddenException('–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const allDatesAreBooked = this.checkIfAllDatesAreBooked(listing.start_date, listing.end_date, bookedDates);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const newBookingStatus = allDatesAreBooked ? 'booked' : 'available';

        const result = await this.db.query(
            'UPDATE listings SET "bookingStatus" = $1 WHERE id = $2 RETURNING *',
            [newBookingStatus, id]
        );

        return result.rows[0];
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –≤—Å–µ –¥–∞—Ç—ã
    private checkIfAllDatesAreBooked(startDate: string, endDate: string, bookedDates: string[]): boolean {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
        const allDates = this.generateDateRange(startDate, endDate);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞—Ç—ã –∏–∑ allDates –µ—Å—Ç—å –≤ bookedDates
        return allDates.every(date => bookedDates.includes(date));
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    private generateDateRange(startDate: string, endDate: string): string[] {
        const dates: string[] = []; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –º–∞—Å—Å–∏–≤–∞
        let currentDate = new Date(startDate);
        const end = new Date(endDate);

        while (currentDate <= end) {
            dates.push(currentDate.toISOString().split('T')[0]); // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            currentDate.setDate(currentDate.getDate() + 1);
        }

        return dates;
    }


    async searchByTitle(query: string) {
        const result = await this.db.query(
            `SELECT * FROM listings WHERE title ILIKE $1`,
            [`%${query}%`]
        );
        return result.rows;
    }

}