import { Injectable, Inject, NotFoundException, ForbiddenException, Logger, BadRequestException, Get, Query} from '@nestjs/common';
import { Pool } from 'pg';
import { CreateListingDto } from './dto/create-listing.dto';
import { UpdateListingDto } from './dto/update-listing.dto';
import { CategoryService } from '../listing/category/category.service';
import { CloudinaryService } from '../cloudinary/cloudinary.service';


@Injectable()
export class ListingService {
    private readonly logger = new Logger(ListingService.name);

    constructor(
        @Inject('PG_POOL') private readonly db: Pool,
        private readonly categoryService: CategoryService,
        private readonly cloudinaryService: CloudinaryService,
    ) {
        this.logger.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        this.db.query('SET client_encoding = \'UTF8\'');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è —á–µ—Ä–Ω–æ–≤–∏–∫–∏)
    async getListingsByUser(userId: number) {
        this.logger.log(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
        const query = 'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "startDate", "endDate", photos FROM listings WHERE "userId" = $1';
        console.log('SQL-–∑–∞–ø—Ä–æ—Å:', query, [userId]); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const result = await this.db.query(query, [userId]);
        this.logger.log(`–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.rows.length}`);
        return result.rows;
    }


    async getAllListings(filters: {
        minPrice?: number;
        maxPrice?: number;
        location?: string;
        categoryId?: number;
        status?: string;
    }) {
        try {
            let query = `
            SELECT l.*, c.name AS category_name
            FROM listings l
            JOIN category c ON l."categoryId"::integer = c.id
            WHERE 1=1
        `;
            const params: any[] = [];
            let paramIndex = 1;

            if (filters.status) {
                query += ` AND l.status = $${paramIndex}`;
                params.push(filters.status);
                paramIndex++;
            }

            if (filters.minPrice) {
                query += ` AND l.price >= $${paramIndex}`;
                params.push(filters.minPrice);
                paramIndex++;
            }

            if (filters.maxPrice) {
                query += ` AND l.price <= $${paramIndex}`;
                params.push(filters.maxPrice);
                paramIndex++;
            }

            if (filters.location) {
                query += ` AND l.location ILIKE $${paramIndex}`;
                params.push(`%${filters.location}%`);
                paramIndex++;
            }

            if (filters.categoryId) {
                query += ` AND l."categoryId"::integer = $${paramIndex}`;
                params.push(filters.categoryId);
                paramIndex++;
            }

            query += ' ORDER BY l."created_at" DESC';

            const result = await this.db.query(query, params);
            return result.rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ getAllListings:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å "draft" –∏ "bookingStatus" –∫–∞–∫ "available")
    async createListing(dto: CreateListingDto, userId: number) {
        const { title, description, price, categoryId, location, startDate, endDate, photos, priceType } = dto;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "draft" –∏ "bookingStatus" –∫–∞–∫ "available" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const status = 'draft';
        const bookingStatus = 'available';

        const result = await this.db.query(
            `INSERT INTO listings
             (title, description, price, "categoryId", "userId", status, "bookingStatus", location, "startDate", "endDate", photos, "priceType")
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
                 RETURNING *`,
            [
                title,
                description,
                price,
                categoryId,
                userId,
                status,
                bookingStatus,
                location,
                startDate,
                endDate,
                photos,
                priceType, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ü–µ–Ω—ã
            ]
        );

        return result.rows[0];
    }


    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID (—á–µ—Ä–Ω–æ–≤–∏–∫–∏ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é)
    async getListingById(id: number, userId: number | null) {
        console.log(`üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å ID: ${id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const exists = await this.db.query('SELECT id FROM listings WHERE id = $1', [id]);
        if (!exists.rows.length) {
            console.error(`‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const result = await this.db.query(
            'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "startDate", "endDate", photos FROM listings WHERE id = $1',
            [id]
        );

        if (!result.rows.length) {
            console.error(`‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
            throw new NotFoundException('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        }

        const listing = result.rows[0];

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º bookingStatus –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!listing.bookingStatus) {
            listing.bookingStatus = "available"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º, —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ bookingStatus
        if (listing.userId !== userId) {
            delete listing.status;
            delete listing.bookingStatus;
        }

        console.log(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–∞–π–¥–µ–Ω–æ`);
        return listing;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async updateListing(id: number, dto: UpdateListingDto, userId: number) {
        const existing = await this.db.query(
            'SELECT "userId", status, "bookingStatus", photos FROM listings WHERE id = $1',
            [id]
        );

        if (!existing.rows.length) {
            throw new NotFoundException(`Listing with ID ${id} not found`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('You cannot edit this listing');
        }

        // Parse photos as an array if it's stored as a string
        let updatedPhotos = existing.rows[0].photos;
        if (typeof updatedPhotos === 'string') {
            try {
                updatedPhotos = JSON.parse(updatedPhotos);
            } catch {
                updatedPhotos = []; // Default to an empty array if parsing fails
            }
        }

        // Ensure updatedPhotos is an array
        if (!Array.isArray(updatedPhotos)) {
            updatedPhotos = [];
        }

        // Remove deleted photos
        if ((dto.deletedPhotos?.length ?? 0) > 0) {
            updatedPhotos = updatedPhotos.filter(photo => !dto.deletedPhotos!.includes(photo));

            // Delete files from Cloudinary
            try {
                await this.cloudinaryService.deleteFiles(dto.deletedPhotos ?? []);
            } catch (error) {
                this.logger.error('Error deleting files from Cloudinary', error);
            }
        }

        // Add new photos
        if (dto.photos) {
            updatedPhotos = [...updatedPhotos, ...dto.photos];
        }

        // Prepare update data
        const updateData: Record<string, any> = {};
        const validFields = ['title', 'description', 'price', 'priceType', 'quantity',
            'location', 'startDate', 'endDate', 'categoryId', 'status', 'bookingStatus', 'photos'];

        for (const field of validFields) {
            if (dto[field] !== undefined && dto[field] !== null && dto[field] !== '') {
                updateData[field] = field === 'photos' ? updatedPhotos : dto[field];
            }
        }

        if (Object.keys(updateData).length === 0) {
            throw new BadRequestException('No data to update');
        }

        const setClause = Object.keys(updateData)
            .map((key, index) => `"${key}" = $${index + 1}`)
            .join(', ');

        const values = Object.values(updateData);
        values.push(id);

        const query = `UPDATE listings SET ${setClause} WHERE id = $${values.length} RETURNING *`;
        const result = await this.db.query(query, values);

        return result.rows[0];
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async deleteListing(id: number, userId: number) {
        const existing = await this.db.query('SELECT "userId" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        const result = await this.db.query('DELETE FROM listings WHERE id = $1 RETURNING *', [id]);
        return result.rows[0];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ)
    async getListingsByCategory(categoryId: number, filters?: {
        locationId?: number;
        minPrice?: number;
        maxPrice?: number;
        sortBy?: string;
        status?: string;
    }): Promise<any[]> {
        try {
            console.log('Getting listings for category:', categoryId);
            console.log('With filters:', filters);

            // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ JOIN —Å location, —Ç–∞–∫ –∫–∞–∫ location —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
            let query = `
                SELECT
                    l.*,
                    c.name as category_name
                FROM listings l
                         JOIN category c ON l."categoryId"::integer = c.id
                WHERE l."categoryId"::integer = $1 AND l.status = $2
            `;

            const queryParams: any[] = [categoryId, filters?.status || 'published'];
            let paramIndex = 3;

            // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ locationId, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if (filters?.locationId) {
                // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ ID
                const location = await this.db.query(
                    'SELECT name FROM location WHERE id = $1',
                    [filters.locationId]
                );

                if (location.rows.length) {
                    query += ` AND l.location = $${paramIndex}`;
                    queryParams.push(location.rows[0].name);
                    paramIndex++;
                }
            }

            if (filters?.minPrice) {
                query += ` AND l.price >= $${paramIndex}`;
                queryParams.push(filters.minPrice);
                paramIndex++;
            }

            if (filters?.maxPrice) {
                query += ` AND l.price <= $${paramIndex}`;
                queryParams.push(filters.maxPrice);
                paramIndex++;
            }

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            if (filters?.sortBy) {
                switch (filters.sortBy) {
                    case 'price_asc':
                        query += ' ORDER BY l.price ASC';
                        break;
                    case 'price_desc':
                        query += ' ORDER BY l.price DESC';
                        break;
                    case 'date_asc':
                        query += ' ORDER BY l."startDate" ASC';
                        break;
                    case 'date_desc':
                    default:
                        query += ' ORDER BY l."startDate" DESC';
                        break;
                }
            } else {
                query += ' ORDER BY l."startDate" DESC';
            }

            console.log('Executing query:', query);
            console.log('With params:', queryParams);

            const result = await this.db.query(query, queryParams);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
            if (result.rows.length) {
                for (const listing of result.rows) {
                    const locationInfo = await this.db.query(
                        'SELECT * FROM location WHERE name = $1',
                        [listing.location]
                    );
                    listing.location_info = locationInfo.rows[0] || null;
                }
            }

            console.log('Query result:', result.rows);
            return result.rows;
        } catch (error) {
            console.error('Error in getListingsByCategory:', error);
            throw error;
        }
    }
    // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async archiveListing(id: number, userId: number) {
        const existing = await this.db.query('SELECT "userId" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        const result = await this.db.query(
            'UPDATE listings SET status = $1 WHERE id = $2 RETURNING *',
            ['archived', id]
        );
        return result.rows[0];
    }

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
    async publishListing(id: number, userId: number) {
        const existing = await this.db.query('SELECT "userId", status FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        const result = await this.db.query(
            'UPDATE listings SET status = $1 WHERE id = $2 RETURNING *',
            ['published', id]
        );
        return result.rows[0];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    async getListingsByLocation(locationId: number) {
        const result = await this.db.query(
            'SELECT id, title, description, price, "categoryId", "userId", status, "bookingStatus", location, "start_date", "end_date", photos FROM listings WHERE "locationId" = $1',
            [locationId]
        );
        return result.rows;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    async updateBookingStatus(id: number, bookingStatus: string, userId: number) {
        const existing = await this.db.query('SELECT "userId" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        }

        const result = await this.db.query(
            'UPDATE listings SET "bookingStatus" = $1 WHERE id = $2 RETURNING *',
            [bookingStatus, id]
        );
        return result.rows[0];
    }

    // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    async bookListing(id: number, userId: number, bookedDates: string[]) {
        const existing = await this.db.query('SELECT "userId", "start_date", "end_date", "bookingStatus" FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        const listing = existing.rows[0];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç —Å–≤–æ—ë –∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if (listing.userId === userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
        if (listing.status !== 'published') {
            throw new ForbiddenException('–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const allDatesAreBooked = this.checkIfAllDatesAreBooked(listing.start_date, listing.end_date, bookedDates);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const newBookingStatus = allDatesAreBooked ? 'booked' : 'available';

        const result = await this.db.query(
            'UPDATE listings SET "bookingStatus" = $1 WHERE id = $2 RETURNING *',
            [newBookingStatus, id]
        );

        return result.rows[0];
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –≤—Å–µ –¥–∞—Ç—ã
    private checkIfAllDatesAreBooked(startDate: string, endDate: string, bookedDates: string[]): boolean {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
        const allDates = this.generateDateRange(startDate, endDate);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞—Ç—ã –∏–∑ allDates –µ—Å—Ç—å –≤ bookedDates
        return allDates.every(date => bookedDates.includes(date));
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    private generateDateRange(startDate: string, endDate: string): string[] {
        const dates: string[] = []; // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –º–∞—Å—Å–∏–≤–∞
        let currentDate = new Date(startDate);
        const end = new Date(endDate);

        while (currentDate <= end) {
            dates.push(currentDate.toISOString().split('T')[0]); // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
            currentDate.setDate(currentDate.getDate() + 1);
        }

        return dates;
    }


    async searchByTitle(query: string) {
        const result = await this.db.query(
            `SELECT * FROM listings WHERE title ILIKE $1`,
            [`%${query}%`]
        );
        return result.rows;
    }

    async getLatestListings() {
        this.logger.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
        const query = `
            SELECT 
                id, 
                title, 
                description, 
                price, 
                "categoryId", 
                "userId", 
                status, 
                "bookingStatus", 
                location, 
                "startDate", 
                "endDate", 
                photos,
                "created_at"
            FROM listings 
            WHERE status = 'published'
            ORDER BY "created_at" DESC
            LIMIT 10
        `;

        const result = await this.db.query(query);
        this.logger.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${result.rows.length}`);
        return result.rows;
    }



    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)

    async restoreArchivedListing(
        id: number,
        dto: { status: string },
        userId: number
    ) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        const existing = await this.db.query(
            'SELECT "userId", status FROM listings WHERE id = $1',
            [id]
        );

        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –±—ã–ª 'archived'
        if (existing.rows[0].status !== 'archived') {
            throw new BadRequestException('–ú–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        }

        // 3. –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
        const result = await this.db.query(
            'UPDATE listings SET status = $1 WHERE id = $2 RETURNING *',
            [dto.status, id]
        );

        return result.rows[0];
    }

    async checkCanRestore(id: number, userId: number) {
        const listing = await this.getListingById(id, userId);
        if (!listing) throw new NotFoundException('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        if (listing.userId !== userId) throw new ForbiddenException('–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ');
        if (listing.status !== 'archived') throw new BadRequestException('–¢–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
    }

    async directStatusUpdate(id: number, newStatus: string) {
        const result = await this.db.query(
            'UPDATE listings SET status = $1 WHERE id = $2 RETURNING *',
            [newStatus, id]
        );
        return result.rows[0];
    }

    async restoreListing(id: number, userId: number) {
        // Check if the listing exists and belongs to the user
        const existing = await this.db.query('SELECT "userId", status FROM listings WHERE id = $1', [id]);
        if (!existing.rows.length) {
            throw new NotFoundException(`–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        if (existing.rows[0].userId !== userId) {
            throw new ForbiddenException('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
        }

        // Ensure the listing is archived
        if (existing.rows[0].status !== 'archived') {
            throw new BadRequestException('–ú–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        }

        // Update the status to 'draft' or another appropriate status
        const result = await this.db.query(
            'UPDATE listings SET status = $1 WHERE id = $2 RETURNING *',
            ['draft', id]
        );

        return {
            success: true,
            message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            data: result.rows[0],
        };
    }
}
